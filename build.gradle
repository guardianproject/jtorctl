apply plugin: 'java'

def stdout = new ByteArrayOutputStream()
exec {
    commandLine 'git', 'describe', '--tags', '--always'
    standardOutput = stdout
}
version = stdout.toString().trim()

stdout = new ByteArrayOutputStream()
exec {
    commandLine 'git', 'rev-parse', 'HEAD'
    standardOutput = stdout
}
ext.commitId = stdout.toString().trim()

description = 'A Java library for controlling a Tor instance via its control port.'
group = 'info.guardianproject'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    maven { url 'file:///usr/share/maven-repo' }
    mavenCentral()
}

dependencies {
    testImplementation 'commons-io:commons-io:2.6'
    testImplementation 'org.json:json:20190722'
    testImplementation 'junit:junit:4.12'
}


sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
    }

    test {
        java {
            srcDirs = ['test']
        }
    }
}

tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

tasks.withType(Javadoc) {
    options.noTimestamp = true
    options.addStringOption('charset', 'UTF-8') // to match Maven's case
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

apply plugin: 'maven'

// https://reproducible-builds.org/docs/jvm/
task buildInfo {
    doLast {
        Properties p = new Properties()
        p.setProperty('buildinfo.version', '0.1')
        p.setProperty('name', project.name)
        p.setProperty('version', project.version)
        p.setProperty('build-timestamp', System.currentTimeMillis().toString())
        p.setProperty('group-id', project.group)
        p.setProperty('artifact-id', project.name)
        p.setProperty('build-tool', 'gradle')
        p.setProperty('java.version', System.properties['java.version'])
        p.setProperty('java.vendor', System.properties['java.vendor'])
        p.setProperty('java.vm.version', System.properties['java.vm.version'])
        p.setProperty('java.specification.version', System.properties['java.specification.version'])
        p.setProperty('os.name', System.properties['os.name'])
        p.setProperty('os.arch', System.properties['os.arch'])
        p.setProperty('os.version', System.properties['os.version'])
        //p.setProperty('source.used', '')
        //p.setProperty('source.artifact', '<groupId>:<artifactId>:<version>:<classifier>:<extension>')
        //p.setProperty('source.url', '<url where to download official source tarball>')
        p.setProperty('source.scm.uri', 'https://github.com/eighthave/jtorctl.git')
        p.setProperty('source.scm.tag', project.version)
        p.setProperty('source.scm.commit-id', project.ext.commitId)

        def gradleTaskNames = ''
        for (task in gradle.taskGraph.getAllTasks().reverse()) {
            gradleTaskNames = "${task.name} $gradleTaskNames".strip()
        }
        p.setProperty('gradle.tasks', gradleTaskNames)
        p.setProperty('gradle.version', gradle.gradleVersion)

        int i = 0
        tasks.withType(AbstractArchiveTask) { task ->
            p.setProperty('output.' + i + '.filename', task.archiveName)
            def f = file("${task.destinationDir}/${task.archiveName}")
            p.setProperty('output.' + i + '.length', f.size().toString())
            p.setProperty('output.' + i + '.sha256',
                    java.security.MessageDigest.getInstance('SHA-256').digest(f.bytes).encodeHex().toString())
            i++
        }
        def buildInfoFile = file("${project.libsDir}/${project.archivesBaseName}-${project.version}.buildinfo")
        p.store(new FileWriter(buildInfoFile), null)
    }
}

task writeNewPom {
    doLast {
        pom {
            project {
                description project.description
                inceptionYear '2005'
                url 'https://gitweb.torproject.org/jtorctl'
                licenses {
                    license {
                        name 'BSD-3-clause'
                        url 'https://github.com/torproject/jtorctl/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'torproject'
                        name = 'Tor Project'
                        email = 'torbrowser@torproject.org'
                    }
                    developer {
                        id = 'freehaven'
                        name = 'Free Haven Project'
                        email = 'freehaven@freehaven.net'
                    }
                    developer {
                        id = 'guardianproject'
                        name = 'Guardian Project'
                        email = 'support@guardianproject.info'
                    }
                    developer {
                        id = 'briarproject'
                        name = 'Briar Project'
                        email = 'contact@briarproject.org'
                    }
                }
                issueManagement {
                    url = "https://trac.torproject.org"
                }
                properties {
                    maven {
                        compiler {
                            source = project.sourceCompatibility.toString()
                            target = project.targetCompatibility.toString()
                        }
                    }
                }
                scm {
                    connection = 'scm:git:https://git.torproject.org/jtorctl.git'
                    url = 'https://gitweb.torproject.org/jtorctl'
                }
            }
        }.writeTo("${project.libsDir}/${project.archivesBaseName}-${project.version}.pom")
    }
}
