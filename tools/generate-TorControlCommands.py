#!/usr/bin/env python3

import os
import re

GENERATED = '// generated by tools/generate-TorControlCommands.py\n'

output = ''
with open('src/net/freehaven/tor/control/TorControlCommands.java') as fp:
    output = re.split(GENERATED, fp.read())[0]
output += GENERATED

output += '\n    public static final String GENERATED_FROM_TOR_VERSION = "'
with open('../tor/configure.ac') as fp:
    output += re.search(r' *AC_INIT\(\[tor\],\[([0-9a-zA-Z.-]+)\]\)', fp.read()).group(1)
output += '";\n\n'

camelCased = {
    'SETCONF': 'setConf',
    'RESETCONF': 'resetConf',
    'GETCONF': 'getConf',
    'LOADCONF': 'loadConf',
    'SETEVENTS': 'setEvents',
    'AUTHENTICATE': 'authenticate',
    'SAVECONF': 'saveConf',
    'SIGNAL': 'signal',
    'TAKEOWNERSHIP': 'takeOwnership',
    'DROPOWNERSHIP': 'dropOwnership',
    'MAPADDRESS': 'mapAddress',
    'GETINFO': 'getInfo',
    'EXTENDCIRCUIT': 'extendCircuit',
    'SETCIRCUITPURPOSE': 'setCircuitPurpose',
    'SETROUTERPURPOSE': 'setRouterPurpose',
    'ATTACHSTREAM': 'attachStream',
    'POSTDESCRIPTOR': 'postDescriptor',
    'REDIRECTSTREAM': 'redirectStream',
    'CLOSESTREAM': 'closeStream',
    'CLOSECIRCUIT': 'closeCircuit',
    'USEFEATURE': 'useFeature',
    'RESOLVE': 'resolve',
    'PROTOCOLINFO': 'protocolInfo',
    'AUTHCHALLENGE': 'authChallenge',
    'DROPGUARDS': 'dropGuards',
    'DROPTIMEOUTS': 'dropTimeouts',
    'HSFETCH': 'hsFetch',
    'HSPOST': 'hsPost',
    'ADD_ONION': 'addOnion',
    'DEL_ONION': 'delOnion',
    'ONION_CLIENT_AUTH_ADD': 'onionClientAuthAdd',
    'ONION_CLIENT_AUTH_REMOVE': 'onionClientAuthRemove',
    'ONION_CLIENT_AUTH_VIEW': 'onionClientAuthView',
}

commands = []
command_types = []
circuit_purpose_types = []
with open('../tor/src/feature/control/control_cmd.c') as fp:
    contents = fp.read()
    m = re.search(r'control_cmd_def_t CONTROL_COMMANDS\[]\s*=\s*{\n*([^}]+)}', contents, re.MULTILINE)
    control_cmd_def_t = m.group(1).rstrip()
    for type, command in re.findall(r'.*(MULTLINE|OBSOLETE|ONE_LINE)\(([a-zA-Z0-9_]+).*', control_cmd_def_t):
        commands.append(command.upper())
        command_types.append([type, command.upper()])
    m = re.search(r'circuit_purpose_from_string\([^{]*\n?\s*{\n*([^}]+)}', contents, re.MULTILINE | re.DOTALL)
    circuit_purpose = m.group(1).rstrip()
    for type, string in re.findall(r'"([a-z0-9_]+)".*? ([A-Z0-9_]+);', circuit_purpose, re.DOTALL):
        circuit_purpose_types.append([type, string])

for type, command in command_types:
    if type == 'OBSOLETE':
        output += '    @Deprecated\n'

    if type == 'MULTLINE':
        output += '    public static final String %s = "+%s";\n' % (command, command)
    else:
        output += '    public static final String %s = "%s";\n' % (command, command)

with open('src/net/freehaven/tor/control/TorControlConnection.java.gen', 'w') as fp:
    with open('src/net/freehaven/tor/control/TorControlConnection.java') as fpr:
        fp.write(fpr.read()[:10500])  # reduce the diff by including the top
    fp.write("""
    protected void react() throws IOException {
    }

""")
    for command in commands:
        fp.write("""
    /**
     *
     * @see <a href="https://torproject.gitlab.io/torspec/control-spec/#%s">control-spec: %s</a>
     */
    public void %s() throws IOException {
        sendAndWaitForResponse(%s + "\\r\\n", null);
    }
""" % (command.lower(), command, camelCased[command], command))
    fp.write('}\n')


commands = ['ERROR', 'DONE'] + commands
value = 2
output += '\n'
output += '    public static final short CMD_ERROR = 0x0000;\n'
output += '    public static final short CMD_DONE = 0x0001;\n'
for type, command in command_types:
    if type == 'OBSOLETE':
        output += '    @Deprecated\n'
    output += '    public static final short CMD_%s = 0x%04X;\n' % (command, value)
    value += 1

output += '\n    public static final String[] CMD_NAMES = {\n'
for command in commands:
    output += '        "%s",\n' % (command)
output += '    };\n\n'

for type, string in circuit_purpose_types:
    output += '    public static final String %s = "%s";\n' % (string, type)
output += '\n'

event_names = ['(0)', ]
events = []
value = 1
with open('../tor/src/feature/control/control_events.c') as fp:
    m = re.search(r'const struct control_event_t control_event_table\[]\s*=\s*{\n*([^;]+)};', fp.read(), re.MULTILINE)
    for key, name in re.findall(r'\s*{\s*(EVENT_[^ ]+), *"([A-Z0-9_]+)".*', m.group(1)):
        event_names.append(name)
        events.append([key, name])
        output += '    public static final short %s_INDEX = 0x%04X;\n' % (key, int(value))
        value += 1

output +='\n    public static final String[] EVENT_NAMES = {\n        "'
output += '",\n        "'.join(event_names)
output += '"\n    };\n\n'
for key, name in events:
    output += '    public static final String %s = "%s";\n' % (key, name)
output += '\n'


with open('src/net/freehaven/tor/control/RawEventListener.java', 'w') as fp:
    fp.write("""
package net.freehaven.tor.control;

/**
 * Receive the raw event data.
 * <p>
 * This file is auto-generated by {@code %s}
 *
 * @see <a href="https://torproject.gitlab.io/torspec/control-spec/#asynchronous-events">Control Port Asynchronous events</a>
 */
public interface RawEventListener {
    /**
     * Receive the raw event data from these events:
     * <ul>
""" % os.path.basename(__file__))
    for key, name in events:
        fp.write('     * <li>{@link TorControlCommands#%s}</li>\n' % key);
    fp.write("""     * </ul>
     *
     * @see <a href="https://torproject.gitlab.io/torspec/control-spec/#asynchronous-events">Control Port Asynchronous events</a>
     */
    public void onEvent(String keyword, String data);
}""")


fixCamelCase = {
    'addrmap': 'addrMap',
    'buildtimeoutSet': 'buildTimeoutSet',
    'descchanged': 'descChanged',
    'newconsensus': 'newConsensus',
}
with open('src/net/freehaven/tor/control/EventListener.java', 'w') as fp:
    fp.write("""
package net.freehaven.tor.control;

/**
 * Receive the events from Tor.
 * <p>
 * This file is auto-generated by {@code %s}
 *
 * @see <a href="https://torproject.gitlab.io/torspec/control-spec/#asynchronous-events">Control Port Asynchronous events</a>
 */
public abstract class EventListener implements RawEventListener {
    /**
     * Receive the raw event data from these events:
     * <ul>
""" % os.path.basename(__file__))
    for key, name in events:
        fp.write('     * <li>{@link TorControlCommands#%s}</li>\n' % key);
    fp.write("""     * </ul>
     *
     * @see <a href="https://torproject.gitlab.io/torspec/control-spec/#asynchronous-events">Control Port Asynchronous events</a>
     */
    public void onEvent(String keyword, String data) {
        switch(keyword) {
""")
    methods = []
    for key, name in events:
        method = key.replace('_', ' ')[6:].title().replace(' ', '')
        method = method[0].lower() + method[1:]
        method = fixCamelCase.get(method, method)
        methods.append(method)
        fp.write("""            case TorControlCommands.%s:
                %s(data);
                break;
""" % (key, method))
    fp.write('            default:\n                unrecognized(data);\n')
    fp.write('        }\n    }\n\n')
    for method in methods:
        fp.write('    public abstract void %s(String data);\n\n' % method)
    fp.write('    public abstract void unrecognized(String data);\n\n')
    fp.write('}')

circ_status_events = []
with open('../tor/src/core/or/ocirc_event.h') as fp:
    m = re.search(r'typedef enum circuit_status_event_t\s*{\n*([^}]+)}', fp.read(), re.MULTILINE)
    for event, value in re.findall(r'\s*CIRC_EVENT_([A-Z0-9_]+)\s*=\s*([0-9]+),?', m.group(1)):
        circ_status_events.append(event)
        output += '    public static final byte CIRC_STATUS_%s = 0x%02X;\n' % (event, int(value) + 1)
output += '\n    public static final String[] CIRC_STATUS_NAMES = {\n        "'
output += '",\n        "'.join(circ_status_events)
output += '",\n    };\n\n'
for event in circ_status_events:
    output += '    public static final String CIRC_EVENT_%s = "%s";\n' % (event, event)


status_names = []
output += '\n'
with open('../tor/src/feature/control/control_events.h') as fp:
    m = re.search(r'typedef enum stream_status_event_t\s*{\n*([^}]+)}', fp.read(), re.MULTILINE)
    for event, value in re.findall(r'\s*STREAM_EVENT_([A-Z0-9_]+)\s*=\s*([0-9]+),?', m.group(1)):
        status_names.append(event)
        output += '    public static final byte STREAM_STATUS_%s = 0x%02X;\n' % (event, int(value))

output +='\n    public static final String[] STREAM_STATUS_NAMES = {\n        "'
output += '",\n        "'.join(status_names)
output += '"\n    };\n\n'
for event in status_names:
    output += '    public static final String STREAM_EVENT_%s = "%s";\n' % (event, event)


events = []
output += '\n'
with open('../tor/src/core/or/orconn_event.h') as fp:
    m = re.search(r'typedef enum or_conn_status_event_t\s*{\n*([^}]+)}', fp.read(), re.MULTILINE)
    for event, value in re.findall(r'\s*OR_CONN_EVENT_([A-Z0-9_]+)\s*=\s*([0-9]+),?', m.group(1)):
        events.append(event)
        output += '    public static final byte OR_CONN_STATUS_%s = 0x%02X;\n' % (event, int(value))

output +='\n    public static final String[] OR_CONN_STATUS_NAMES = {\n        "'
output += '", "'.join(events)
output += '"\n    };\n\n'
for event in events:
    output += '    public static final String OR_CONN_EVENT_%s = "%s";\n' % (event, event)
output += '\n'


signals = []
with open('../tor/src/feature/control/control.c') as fp:
    m = re.search(r'const struct signal_name_t signal_table\[]\s*=\s*{\n*([^;]+)};', fp.read(), re.MULTILINE)
    for name in re.findall(r'\s*{\s*SIG[^ ]+, *"([A-Z0-9_]+)".*', m.group(1)):
        if name not in ('HUP', 'INT', 'USR1', 'USR2', 'TERM'):
            output += '    /**\n'
            output += '     * @see <a href="https://torproject.gitlab.io/torspec/control-spec/#signal">control-spec: SIGNAL</a>\n'
            output += '     */\n'
            output += '    public static final String SIGNAL_%s = "%s";\n' % (name, name)


output += """
    @Deprecated
    public static final byte SIGNAL_HUP = 0x01;
    @Deprecated
    public static final byte SIGNAL_INT = 0x02;
    @Deprecated
    public static final byte SIGNAL_USR1 = 0x0A;
    @Deprecated
    public static final byte SIGNAL_USR2 = 0x0C;
    @Deprecated
    public static final byte SIGNAL_TERM = 0x0F;

    public static final String ERROR_MSGS[] = {
        "Unspecified error",
        "Internal error",
        "Unrecognized message type",
        "Syntax error",
        "Unrecognized configuration key",
        "Invalid configuration value",
        "Unrecognized byte code",
        "Unauthorized",
        "Failed authentication attempt",
        "Resource exhausted",
        "No such stream",
        "No such circuit",
        "No such OR",
    };

    public static final String HS_ADDRESS = "onionAddress";
    public static final String HS_PRIVKEY = "onionPrivKey";

    @Deprecated
    public static final byte STREAM_STATUS_NEW_CONNECT = STREAM_STATUS_NEW;

    @Deprecated
    public static final short EVENT_CIRCSTATUS = EVENT_CIRCUIT_STATUS_INDEX;
    @Deprecated
    public static final short EVENT_STREAMSTATUS = EVENT_STREAM_STATUS_INDEX;
    @Deprecated
    public static final short EVENT_ORCONNSTATUS = EVENT_OR_CONN_STATUS_INDEX;
    @Deprecated
    public static final short EVENT_BANDWIDTH = EVENT_CONN_BW_INDEX;
    @Deprecated
    public static final short EVENT_MSG_DEBUG = EVENT_DEBUG_MSG_INDEX;
    @Deprecated
    public static final short EVENT_MSG_INFO = EVENT_INFO_MSG_INDEX;
    @Deprecated
    public static final short EVENT_MSG_NOTICE = EVENT_NOTICE_MSG_INDEX;
    @Deprecated
    public static final short EVENT_MSG_WARN = EVENT_WARN_MSG_INDEX;
    @Deprecated
    public static final short EVENT_MSG_ERROR = EVENT_ERR_MSG_INDEX;
}
"""

with open('src/net/freehaven/tor/control/TorControlCommands.java', 'w') as fp:
    fp.write(output)
